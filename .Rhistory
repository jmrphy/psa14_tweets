s.out <- sim(z.out, x = x.lo, x1 = x.hi)
summary(s.out)
names(s.out)
x.lo <- setx(z.out, lopenk=2)
x.hi <- setx(z.out, lopenk=100)
s.out <- sim(z.out, x = x.lo, x1 = x.hi)
names(s.out)
s.out$result
s.out$qi
s.out$qi$ev
s.out$qi$result
names(s.out)
s.out$qi$result$fd
s.out$result$fd
names(s.out$result)
names(s.out$zelig)
names(s.out$qi)
names(s.out$qi$ev)
names(s.out$qi$First Differences: E(Y|X1) - E(Y|X))
names(s.out$qi[5])
s.out$qi[5]
summary(s.out$qi[5])
median(s.out$qi[5])
names(s.out)
names(s.out)
summary(s.out)
summary(s.out$qi)
summary(s.out$qi$fd)
summary(s.out)
mean(s.out$qi$fd)
summary(s.out)
x.lo <- setx(z.out, lopenk=0)
x.hi <- setx(z.out, lopenk=100)
s.out <- sim(z.out, x = x.lo, x1 = x.hi)
summary(s.out)
x.lo <- setx(z.out, lopenk=min(df$lopenk))
x.hi <- setx(z.out, lopenk=mean(df$lopenk)
)
s.out <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out$qi$fd)
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.trade$qi$fd)
?sd
x.lo <- setx(z.out, lopenk=mean(df$lopenk))
x.hi <- setx(z.out, lopenk=mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.trade$qi$fd)
x.lo <- setx(z.out, lopenk=mean(df$lopenk))
x.hi <- setx(z.out, lopenk=(mean(df$lopenk)-sd(df$lopenk)) + mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.trade$qi$fd)
x.lo <- setx(z.out, lfpistock=mean(df$fpistock))
x.lo <- setx(z.out, lfpistock=mean(df$lfpistock))
x.hi <- setx(z.out, lfpistock=(mean(df$lfpistock)-sd(df$lfpistock)) + mean(df$lfpistock)+sd(df$lfpistock))
s.out.fpi <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.fpi$qi$fd)
?quantile
?percentile
?percent
x.lo <- setx(z.out, lfpistock=mean(df$lfpistock)-sd(df$lfpistock))
x.hi <- setx(z.out, lfpistock=mean(df$lfpistock)+sd(df$lfpistock))
s.out.fpi <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.fpi$qi$fd)
x.lo <- setx(z.out, lopenk=mean(df$lopenk)-sd(df$lopenk))
x.hi <- setx(z.out, lopenk=mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.trade$qi$fd)
x.lo <- setx(z.out, lfdiinflow=mean(df$lfdiinflow)-sd(df$lfdiinflow))
x.hi <- setx(z.out, lfdiinflow=mean(df$lfdiinflow)+sd(df$lfdiinflow))
s.out.fdi <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.fdi$qi$fd)
mean(s.out.trade$qi$ev)
names(s.out.trade$qi)
mean(s.out.trade$qi$ev)
x.lo <- setx(z.out, lopenk=mean(df$lopenk)-sd(df$lopenk))
x.hi <- setx(z.out, lopenk=mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
mean(s.out.trade$qi$fd)
mean(s.out.trade$qi$ev)
mean(s.out.trade$qi[,1])
mean(s.out.trade$qi)
mean(s.out.trade$qi$fd)
mean(s.out.trade$qi$pv)
summary(s.out)
test<-as.data.frame(summary(s.out))
test<-as.data.frame(unlist(summary(s.out)))
test<-as.data.frame(s.out)
summary(s.out.trade)
x.lo <- setx(z.out, lopenk=0)
x.hi <- setx(z.out, lopenk=mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
summary(s.out.trade)
x.lo <- setx(z.out, lopenk=0)
x.lo <- setx(z.out, lopenk=0)
x.hi <- setx(z.out, lopenk=mean(df$lopenk)+sd(df$lopenk))
s.out.trade <- sim(z.out, x = x.lo, x1 = x.hi)
summary(s.out.trade)
mean(df$lopenk)+sd(df$lopenk)
mean(df$lopenk)
mean(s.out.trade$qi$fd)
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models2.Rdata")
many.k<-append(lda.models, lda.models2)
logliks <- as.data.frame(as.matrix(lapply(many.k, logLik)))
logliks$LogLikelihood<-as.numeric(logliks$V1)
logliks$K<-seq(5, 200, by = 5)
ggplot(logliks, aes(x=K, y=LogLikelihood)) + geom_line() + theme_bw()
perplexity <- as.data.frame(as.matrix(lapply(many.k, perplexity)))
logliks$Perplexity<-as.numeric(perplexity$V1)
ggplot(logliks, aes(x=K, y=Perplexity)) + geom_line() + theme_bw()
library(twitteR)
library(igraph)
library(stringr)
library(RJSONIO)
dm_tweets = searchTwitter("#psa14", n=1500, lang="en")
load("~/Dropbox/R Code/twitCred.RData")
dm_tweets = searchTwitter("#psa14", n=1500, lang="en")
?searchTwitter
require(ROAuth)
dm_tweets = searchTwitter("#psa14", n=1500, lang="en")
registerTwitterOAuth(twitCred)
twitCred$handshake()  # this will make you go to a website, get a password and type it into R console
registerTwitterOAuth(twitCred)
require(twitteR)
require(ggplot2)
require(stringr)
require(ROAuth)
registerTwitterOAuth(twitCred)
twitCred$handshake()  # this will make you go to a website, get a password and type it into R console
twitCred$handshake()  # this will make you go to a website, get a password and type it into R console
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "3o180MpPQXwFzagL6Z6mqQ"
consumerSecret <- "ISvD8bsix4xaOVii8Ipe65DzpTPA5owTsdgioI62eM"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()  # this will make you go to a website, get a password and type it into R console
registerTwitterOAuth(twitCred)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "220913717-ssqcSUmTFAbaB0Ih6SmNfETplIDJbrebOKRvFntL"
consumerSecret <- "13cQuviUpEyCdvZk8qjXpFkdk2KvvU90qdn6lA0dbug"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()  # this will make you go to a website, get a password and type it into R console
install.packages("twitteR")
install.packages("twitteR")
require(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "3o180MpPQXwFzagL6Z6mqQ"
consumerSecret <- "ISvD8bsix4xaOVii8Ipe65DzpTPA5owTsdgioI62eM"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "3o180MpPQXwFzagL6Z6mqQ"
consumerSecret <- "ISvD8bsix4xaOVii8Ipe65DzpTPA5owTsdgioI62eM"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()  # this
registerTwitterOAuth(twitCred)
save(twitCred, file="twitCred.RData")
library(twitteR)
library(igraph)
library(stringr)
library(RJSONIO)
dm_tweets = searchTwitter("#psa14", n=1500, lang="en")
?searchTwitter
dm_txt = sapply(dm_tweets, function(x) x$getText())
grep("(RT|via)((?:\\b\\W*@\\w+)+)", dm_tweets,
ignore.case=TRUE, value=TRUE)
rt_patterns = grep("(RT|via)((?:\\b\\W*@\\w+)+)",
dm_txt, ignore.case=TRUE)
dm_txt[rt_patterns]
who_retweet = as.list(1:length(rt_patterns))
who_post = as.list(1:length(rt_patterns))
for (i in 1:length(rt_patterns))
{
# get tweet with retweet entity
twit = dm_tweets[[rt_patterns[i]]]
# get retweet source
poster = str_extract_all(twit$getText(),
"(RT|via)((?:\\b\\W*@\\w+)+)")
#remove ':'
poster = gsub(":", "", unlist(poster))
# name of retweeted user
who_post[[i]] = gsub("(RT @|via @)", "", poster, ignore.case=TRUE)
# name of retweeting user
who_retweet[[i]] = rep(twit$getScreenName(), length(poster))
}
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
retweeter_poster = cbind(who_retweet, who_post)
rt_graph = graph.edgelist(retweeter_poster)
ver_labs = get.vertex.attribute(rt_graph, "name", index=V(rt_graph))
glay = layout.fruchterman.reingold(rt_graph)
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color="gray25",
vertex.size=10,
vertex.label=ver_labs,
vertex.label.family="sans",
vertex.shape="none",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.95, s=1, v=.7, alpha=0.5))
# add title
title("\nWho retweets whom",
cex.main=1, col.main="gray95")
# Plot 2, more sci-fi and with no vertex labels
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.frame.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.size=5,
vertex.label=NA,
vertex.label.family="mono",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.35, s=1, v=.7, alpha=0.4))
title("\nWho retweets whom",
cex.main=1, col.main="gray95", family="mono")
rt_graph2 = delete.vertices(rt_graph, V(rt_graph)[ degree(rt_graph)==0 ])
V(rt_graph2)$label = NA
V(rt_graph2)$color =  rgb(1,0,0,.1)
V(rt_graph2)$size = 2
E(rt_graph2)$width = .3
E(rt_graph2)$color = rgb(.5,.5,0,.1)
par(bg="white", mar=c(1,1,1,1))
plot.igraph(rt_graph2, layout=layout.fruchterman.reingold)
cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res,
size=abs(res)))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #Expressyourself")
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.frame.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.size=5,
vertex.label=NA,
vertex.label.family="mono",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.35, s=1, v=.7, alpha=0.4))
title("\nWho retweets whom",
cex.main=1, col.main="gray95", family="mono")
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.frame.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.size=5,
vertex.label=NA,
vertex.label.family="mono",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.35, s=1, v=.7, alpha=0.4))
title("Retweet Network at #PSA14",
cex.main=1, col.main="gray95", family="mono")
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color="gray25",
vertex.size=10,
vertex.label=ver_labs,
vertex.label.family="sans",
vertex.shape="none",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.95, s=1, v=.7, alpha=0.5))
# add title
title("\nWho retweets whom",
cex.main=1, col.main="gray95")
cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res,
size=abs(res)))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #PSA14")
names(dm_tweets)
dm_tweets[1]
dm_tweets[1][[2]]
dm_tweets[1][2]
dm_tweets[[1]][2]
??twitteR
df<-twListToDF(dm_tweets)
View(df)
View(df)
x$date <- strptime(df$created, "%a, %d %b %Y %H:%M:%S %z", tz = "EST")
df$date <- strptime(df$created, "%a, %d %b %Y %H:%M:%S %z", tz = "EST")
View(df)
require(lubridated)
require(lubridate)
?strptime
??lubridate
View(df)
?lubridate
View(df)
df$time<-ymd_hms(df$created)
View(df)
summary(df$created)
View(df)
guess_formats(df$created)
?ymd_hms
df$time<-as.date(df$created)
df$time<-as.Date(df$created)
View(df)
?as.Date
df$time<-as.POSIXct(df$created)
View(df)
timeseries<-ggplot(data=df, aes(x=time)) + geom_bar(aes(fill=..count..), binwidth=60*30) + theme_bw() + ylab("# of Tweets") + xlab("Time")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
lab(title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=5) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=200) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=100) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=20*20) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=400) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..)) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=range/20) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=(range/20)) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60/30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
?scale_x_datetime
?date_format
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(limits=c(breaks=date_breaks("1 min"),
labels = date_format("%Y:%M:%D:%H:%M:%S"))
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(limits=c(breaks=date_breaks("1 min"),
labels = date_format(ymd_hms))
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(limits=c(breaks=date_breaks("30 min"))
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(breaks=date_breaks("30 min"))
timeseries
?scale_x_datetime
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(breaks=date_breaks("30 min")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(breaks=date_breaks("30 minutes")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf") +
scale_x_datetime(breaks=date_breaks("1 day")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="dsf")
timeseries
timeseries<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..), binwidth=60*30) +
theme_bw() + ylab("# of Tweets") + xlab("Time") +
labs(y="# of Tweets", x="Time", title="Time-Series of #PSA14 Tweets")
timeseries
# Plot 2, more sci-fi and with no vertex labels
par(bg="gray15", mar=c(1,1,1,1))
plot(rt_graph, layout=glay,
vertex.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.frame.color=hsv(h=.35, s=1, v=.7, alpha=0.1),
vertex.size=5,
vertex.label=NA,
vertex.label.family="mono",
vertex.label.color=hsv(h=0, s=0, v=.95, alpha=0.5),
vertex.label.cex=0.85,
edge.arrow.size=0.8,
edge.arrow.width=0.5,
edge.width=3,
edge.color=hsv(h=.35, s=1, v=.7, alpha=0.4))
title("Retweet Network at #PSA14",
cex.main=1, col.main="gray95", family="mono")
cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res,
size=abs(res)))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #PSA14")
cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #PSA14")
setwd("~/Dropbox/side_projects/psa14_tweets") # change this path to your working directory
setwd("~/Dropbox/gh_projects/psa14_tweets") # change this path to your working directory
